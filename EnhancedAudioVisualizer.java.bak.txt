import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.Arrays;

public class EnhancedAudioVisualizer extends JFrame {
    private final int NUM_BARS = 100; // Number of frequency bars
    private final double[] barHeights = new double[NUM_BARS]; // Store bar heights
    private JPanel visualizerPanel;
    private File audioFile;
    private boolean isPlaying = false;

    public EnhancedAudioVisualizer() {
        setTitle("Enhanced Audio Visualizer with Controls");
        setSize(800, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Create visualizer panel
        visualizerPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setColor(Color.BLUE);

                int barWidth = getWidth() / NUM_BARS;
                for (int i = 0; i < NUM_BARS; i++) {
                    int barHeight = (int) (barHeights[i] * getHeight());
                    int x = i * barWidth;
                    int y = getHeight() - barHeight;
                    g2d.fillRect(x, y, barWidth - 2, barHeight); // Draw bar
                }
            }
        };
        add(visualizerPanel, BorderLayout.CENTER);

        // Add controls
        JPanel controlsPanel = new JPanel();
        JButton selectFileButton = new JButton("Select File");
        JButton startButton = new JButton("Start");
        JButton stopButton = new JButton("Stop");

        controlsPanel.add(selectFileButton);
        controlsPanel.add(startButton);
        controlsPanel.add(stopButton);
        add(controlsPanel, BorderLayout.SOUTH);

        // Action for "Select File" button
        selectFileButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                audioFile = fileChooser.getSelectedFile();
                JOptionPane.showMessageDialog(this, "Selected File: " + audioFile.getName());
            }
        });

        // Action for "Start" button
        startButton.addActionListener(e -> {
            if (audioFile == null) {
                JOptionPane.showMessageDialog(this, "Please select an audio file first!");
                return;
            }
            if (!isPlaying) {
                isPlaying = true;
                new Thread(() -> playAudio(audioFile)).start();
            }
        });

        // Action for "Stop" button
        stopButton.addActionListener(e -> isPlaying = false);
    }

    public void playAudio(File audioFile) {
        try (AudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile)) {
            AudioFormat format = audioStream.getFormat();
            SourceDataLine line = AudioSystem.getSourceDataLine(format);
            line.open(format);
            line.start();

            byte[] buffer = new byte[1024];
            double[] window = hammingWindow(buffer.length);

            while (audioStream.read(buffer) != -1 && isPlaying) {
                double[] magnitudes = computeFFT(buffer, format.getSampleRate(), window);
                updateBars(magnitudes);
                visualizerPanel.repaint();
                line.write(buffer, 0, buffer.length);
            }

            line.drain();
            line.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void updateBars(double[] magnitudes) {
        Arrays.fill(barHeights, 0); // Reset bar heights

        for (int i = 0; i < magnitudes.length; i++) {
            int barIndex = Math.min(NUM_BARS - 1, (int) (i / (double) magnitudes.length * NUM_BARS));
            barHeights[barIndex] += magnitudes[i]; // Accumulate energy
        }

        // Normalize bar heights
        double maxHeight = Arrays.stream(barHeights).max().orElse(1.0);
        for (int i = 0; i < NUM_BARS; i++) {
            barHeights[i] /= maxHeight;
        }
    }

    private double[] computeFFT(byte[] audioData, float sampleRate, double[] window) {
        int n = audioData.length / 2; // Number of samples (16-bit audio)
        double[] real = new double[n];
        double[] imag = new double[n];

        for (int i = 0; i < n; i++) {
            int low = audioData[2 * i] & 0xFF;
            int high = audioData[2 * i + 1] << 8;
            real[i] = (low | high) * window[i];
        }

        // Perform FFT
        fft(real, imag);

        // Calculate magnitudes
        double[] magnitudes = new double[n / 2];
        for (int i = 0; i < magnitudes.length; i++) {
            magnitudes[i] = Math.sqrt(real[i] * real[i] + imag[i] * imag[i]);
        }

        return magnitudes;
    }

private void fft(double[] real, double[] imag) {
    int n = real.length;
    int levels = (int) (Math.log(n) / Math.log(2));

    if ((1 << levels) != n) {
        throw new IllegalArgumentException("FFT input length must be a power of 2");
    }

    for (int i = 0; i < n; i++) {
        int j = Integer.reverse(i) >>> (Integer.SIZE - levels);
        if (i < j) {
            double tempReal = real[i];
            double tempImag = imag[i];
            real[i] = real[j];
            imag[i] = imag[j];
            real[j] = tempReal;
            imag[j] = tempImag;
        }
    }

    for (int size = 2; size <= n; size *= 2) {
        double angle = -2 * Math.PI / size;
        double wReal = Math.cos(angle);
        double wImag = Math.sin(angle);

        for (int i = 0; i < n; i += size) {
            double uReal = 1.0;
            double uImag = 0.0;

            for (int j = 0; j < size / 2; j++) {
                int evenIndex = i + j;
                int oddIndex = i + j + size / 2;

                double tempReal = uReal * real[oddIndex] - uImag * imag[oddIndex];
                double tempImag = uReal * imag[oddIndex] + uImag * real[oddIndex];

                real[oddIndex] = real[evenIndex] - tempReal;
                imag[oddIndex] = imag[evenIndex] - tempImag;
                real[evenIndex] += tempReal;
                imag[evenIndex] += tempImag;

                double tempWReal = uReal * wReal - uImag * wImag;
                uImag = uReal * wImag + uImag * wReal;
                uReal = tempWReal;
            }
        }
    }
}

    private double[] hammingWindow(int size) {
        double[] window = new double[size];
        for (int i = 0; i < size; i++) {
            window[i] = 0.54 - 0.46 * Math.cos(2 * Math.PI * i / (size - 1));
        }
        return window;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            EnhancedAudioVisualizer visualizer = new EnhancedAudioVisualizer();
            visualizer.setVisible(true);
        });
    }
}
